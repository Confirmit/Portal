//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 2.0.5.0
// 
namespace Events.SLServiceReference
{
    using System.Runtime.Serialization;


    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "Event", Namespace = "http://schemas.datacontract.org/2004/07/UlterSystems.PortalLib.BusinessObjects")]
    public partial class Event : Events.SLServiceReference.BasePlainObject
    {

        private string DateEventStringField;

        private string DateFormatField;

        private System.DateTime DateTimeField;

        private string DescriptionField;

        private int OwnerIDField;

        private string TitleField;

        private int WorkDaysField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateEventString
        {
            get
            {
                return this.DateTime.ToString(this.DateFormat);
            }
            set
            {
                if ((object.ReferenceEquals(this.DateEventStringField, value) != true))
                {
                    this.DateEventStringField = value;
                    this.RaisePropertyChanged("DateEventString");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateFormat
        {
            get
            {
                return this.DateFormatField;
            }
            set
            {
                if ((object.ReferenceEquals(this.DateFormatField, value) != true))
                {
                    this.DateFormatField = value;
                    this.RaisePropertyChanged("DateFormat");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime
        {
            get
            {
                return this.DateTimeField;
            }
            set
            {
                if ((this.DateTimeField.Equals(value) != true))
                {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true))
                {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnerID
        {
            get
            {
                return this.OwnerIDField;
            }
            set
            {
                if ((this.OwnerIDField.Equals(value) != true))
                {
                    this.OwnerIDField = value;
                    this.RaisePropertyChanged("OwnerID");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title
        {
            get
            {
                return this.TitleField;
            }
            set
            {
                if ((object.ReferenceEquals(this.TitleField, value) != true))
                {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }

        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkDays
        {
            get
            {
                return this.WorkDaysField;
            }
            set
            {
                if ((this.WorkDaysField.Equals(value) != true))
                {
                    this.WorkDaysField = value;
                    this.RaisePropertyChanged("WorkDays");
                }
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "BaseObject", Namespace = "http://schemas.datacontract.org/2004/07/Core")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Events.SLServiceReference.BasePlainObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Events.SLServiceReference.Event))]
    public partial class BaseObject : object, System.ComponentModel.INotifyPropertyChanged
    {

        private System.Nullable<int> IDField;

        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ID
        {
            get
            {
                return this.IDField;
            }
            set
            {
                if ((this.IDField.Equals(value) != true))
                {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null))
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "BasePlainObject", Namespace = "http://schemas.datacontract.org/2004/07/Core")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Events.SLServiceReference.Event))]
    public partial class BasePlainObject : Events.SLServiceReference.BaseObject
    {
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName = "SLServiceReference.ISLService")]
    public interface ISLService
    {

        [System.ServiceModel.OperationContractAttribute(AsyncPattern = true, Action = "http://tempuri.org/ISLService/GetEventsForUser", ReplyAction = "http://tempuri.org/ISLService/GetEventsForUserResponse")]
        System.IAsyncResult BeginGetEventsForUser(int userID, System.AsyncCallback callback, object asyncState);

        System.Collections.ObjectModel.ObservableCollection<Events.SLServiceReference.Event> EndGetEventsForUser(System.IAsyncResult result);
    }

    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ISLServiceChannel : Events.SLServiceReference.ISLService, System.ServiceModel.IClientChannel
    {
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetEventsForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        public GetEventsForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        public System.Collections.ObjectModel.ObservableCollection<Events.SLServiceReference.Event> Result
        {
            get
            {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<Events.SLServiceReference.Event>)(this.results[0]));
            }
        }
    }

    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SLServiceClient : System.ServiceModel.ClientBase<Events.SLServiceReference.ISLService>, Events.SLServiceReference.ISLService
    {

        private BeginOperationDelegate onBeginGetEventsForUserDelegate;

        private EndOperationDelegate onEndGetEventsForUserDelegate;

        private System.Threading.SendOrPostCallback onGetEventsForUserCompletedDelegate;

        private BeginOperationDelegate onBeginOpenDelegate;

        private EndOperationDelegate onEndOpenDelegate;

        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;

        private BeginOperationDelegate onBeginCloseDelegate;

        private EndOperationDelegate onEndCloseDelegate;

        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;

        public SLServiceClient()
        {
        }

        public SLServiceClient(string endpointConfigurationName) :
            base(endpointConfigurationName)
        {
        }

        public SLServiceClient(string endpointConfigurationName, string remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public SLServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) :
            base(endpointConfigurationName, remoteAddress)
        {
        }

        public SLServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) :
            base(binding, remoteAddress)
        {
        }

        public event System.EventHandler<GetEventsForUserCompletedEventArgs> GetEventsForUserCompleted;

        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;

        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Events.SLServiceReference.ISLService.BeginGetEventsForUser(int userID, System.AsyncCallback callback, object asyncState)
        {
            return base.Channel.BeginGetEventsForUser(userID, callback, asyncState);
        }

        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<Events.SLServiceReference.Event> Events.SLServiceReference.ISLService.EndGetEventsForUser(System.IAsyncResult result)
        {
            return base.Channel.EndGetEventsForUser(result);
        }

        private System.IAsyncResult OnBeginGetEventsForUser(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            int userID = ((int)(inValues[0]));
            return ((Events.SLServiceReference.ISLService)(this)).BeginGetEventsForUser(userID, callback, asyncState);
        }

        private object[] OnEndGetEventsForUser(System.IAsyncResult result)
        {
            System.Collections.ObjectModel.ObservableCollection<Events.SLServiceReference.Event> retVal = ((Events.SLServiceReference.ISLService)(this)).EndGetEventsForUser(result);
            return new object[] {
                    retVal};
        }

        private void OnGetEventsForUserCompleted(object state)
        {
            if ((this.GetEventsForUserCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEventsForUserCompleted(this, new GetEventsForUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }

        public void GetEventsForUserAsync(int userID)
        {
            this.GetEventsForUserAsync(userID, null);
        }

        public void GetEventsForUserAsync(int userID, object userState)
        {
            if ((this.onBeginGetEventsForUserDelegate == null))
            {
                this.onBeginGetEventsForUserDelegate = new BeginOperationDelegate(this.OnBeginGetEventsForUser);
            }
            if ((this.onEndGetEventsForUserDelegate == null))
            {
                this.onEndGetEventsForUserDelegate = new EndOperationDelegate(this.OnEndGetEventsForUser);
            }
            if ((this.onGetEventsForUserCompletedDelegate == null))
            {
                this.onGetEventsForUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEventsForUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetEventsForUserDelegate, new object[] {
                        userID}, this.onEndGetEventsForUserDelegate, this.onGetEventsForUserCompletedDelegate, userState);
        }

        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }

        private object[] OnEndOpen(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }

        private void OnOpenCompleted(object state)
        {
            if ((this.OpenCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void OpenAsync()
        {
            this.OpenAsync(null);
        }

        public void OpenAsync(object userState)
        {
            if ((this.onBeginOpenDelegate == null))
            {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null))
            {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null))
            {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }

        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState)
        {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }

        private object[] OnEndClose(System.IAsyncResult result)
        {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }

        private void OnCloseCompleted(object state)
        {
            if ((this.CloseCompleted != null))
            {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }

        public void CloseAsync()
        {
            this.CloseAsync(null);
        }

        public void CloseAsync(object userState)
        {
            if ((this.onBeginCloseDelegate == null))
            {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null))
            {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null))
            {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }

        protected override Events.SLServiceReference.ISLService CreateChannel()
        {
            return new SLServiceClientChannel(this);
        }

        private class SLServiceClientChannel : ChannelBase<Events.SLServiceReference.ISLService>, Events.SLServiceReference.ISLService
        {

            public SLServiceClientChannel(System.ServiceModel.ClientBase<Events.SLServiceReference.ISLService> client) :
                base(client)
            {
            }

            public System.IAsyncResult BeginGetEventsForUser(int userID, System.AsyncCallback callback, object asyncState)
            {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetEventsForUser", _args, callback, asyncState);
                return _result;
            }

            public System.Collections.ObjectModel.ObservableCollection<Events.SLServiceReference.Event> EndGetEventsForUser(System.IAsyncResult result)
            {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<Events.SLServiceReference.Event> _result = ((System.Collections.ObjectModel.ObservableCollection<Events.SLServiceReference.Event>)(base.EndInvoke("GetEventsForUser", _args, result)));
                return _result;
            }
        }
    }
}
