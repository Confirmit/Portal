//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 2.0.5.0
// 
namespace DayInfo.SLServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Event", Namespace="http://schemas.datacontract.org/2004/07/UlterSystems.PortalLib.BusinessObjects")]
    public partial class Event : DayInfo.SLServiceReference.BasePlainObject {
        
        private string DateEventStringField;
        
        private string DateFormatField;
        
        private System.DateTime DateTimeField;
        
        private string DescriptionField;
        
        private bool IsPublicField;
        
        private int OwnerIDField;
        
        private string TitleField;
        
        private int WorkDaysField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateEventString {
            get {
                return this.DateEventStringField;
            }
            set {
                if ((object.ReferenceEquals(this.DateEventStringField, value) != true)) {
                    this.DateEventStringField = value;
                    this.RaisePropertyChanged("DateEventString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateFormat {
            get {
                return this.DateFormatField;
            }
            set {
                if ((object.ReferenceEquals(this.DateFormatField, value) != true)) {
                    this.DateFormatField = value;
                    this.RaisePropertyChanged("DateFormat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateTime {
            get {
                return this.DateTimeField;
            }
            set {
                if ((this.DateTimeField.Equals(value) != true)) {
                    this.DateTimeField = value;
                    this.RaisePropertyChanged("DateTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPublic {
            get {
                return this.IsPublicField;
            }
            set {
                if ((this.IsPublicField.Equals(value) != true)) {
                    this.IsPublicField = value;
                    this.RaisePropertyChanged("IsPublic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int OwnerID {
            get {
                return this.OwnerIDField;
            }
            set {
                if ((this.OwnerIDField.Equals(value) != true)) {
                    this.OwnerIDField = value;
                    this.RaisePropertyChanged("OwnerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkDays {
            get {
                return this.WorkDaysField;
            }
            set {
                if ((this.WorkDaysField.Equals(value) != true)) {
                    this.WorkDaysField = value;
                    this.RaisePropertyChanged("WorkDays");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseObject", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DayInfo.SLServiceReference.BasePlainObject))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DayInfo.SLServiceReference.Event))]
    public partial class BaseObject : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.Nullable<int> IDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BasePlainObject", Namespace="http://schemas.datacontract.org/2004/07/Core")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DayInfo.SLServiceReference.Event))]
    public partial class BasePlainObject : DayInfo.SLServiceReference.BaseObject {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkEvent", Namespace="http://schemas.datacontract.org/2004/07/ConfirmIt.PortalLib.BAL")]
    public partial class WorkEvent : object, System.ComponentModel.INotifyPropertyChanged {
        
        private System.DateTime BeginTimeField;
        
        private System.TimeSpan DurationField;
        
        private System.DateTime EndTimeField;
        
        private DayInfo.SLServiceReference.WorkEventType EventTypeField;
        
        private int EventTypeIDField;
        
        private int IDField;
        
        private string NameField;
        
        private int ProjectIDField;
        
        private int UserIDField;
        
        private int WorkCategoryIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BeginTime {
            get {
                return this.BeginTimeField;
            }
            set {
                if ((this.BeginTimeField.Equals(value) != true)) {
                    this.BeginTimeField = value;
                    this.RaisePropertyChanged("BeginTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.TimeSpan Duration {
            get {
                return this.DurationField;
            }
            set {
                if ((this.DurationField.Equals(value) != true)) {
                    this.DurationField = value;
                    this.RaisePropertyChanged("Duration");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DayInfo.SLServiceReference.WorkEventType EventType {
            get {
                return this.EventTypeField;
            }
            set {
                if ((this.EventTypeField.Equals(value) != true)) {
                    this.EventTypeField = value;
                    this.RaisePropertyChanged("EventType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int EventTypeID {
            get {
                return this.EventTypeIDField;
            }
            set {
                if ((this.EventTypeIDField.Equals(value) != true)) {
                    this.EventTypeIDField = value;
                    this.RaisePropertyChanged("EventTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ID {
            get {
                return this.IDField;
            }
            set {
                if ((this.IDField.Equals(value) != true)) {
                    this.IDField = value;
                    this.RaisePropertyChanged("ID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ProjectID {
            get {
                return this.ProjectIDField;
            }
            set {
                if ((this.ProjectIDField.Equals(value) != true)) {
                    this.ProjectIDField = value;
                    this.RaisePropertyChanged("ProjectID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int WorkCategoryID {
            get {
                return this.WorkCategoryIDField;
            }
            set {
                if ((this.WorkCategoryIDField.Equals(value) != true)) {
                    this.WorkCategoryIDField = value;
                    this.RaisePropertyChanged("WorkCategoryID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkEventType", Namespace="http://schemas.datacontract.org/2004/07/ConfirmIt.PortalLib.BAL")]
    public enum WorkEventType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        NoData = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MainWork = 10,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TimeOff = 9,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        LanchTime = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        OfficeOut = 7,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Ill = 11,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        BusinessTrip = 12,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Vacation = 13,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TrustIll = 14,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        StudyEnglish = 15,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeKey", Namespace="http://schemas.datacontract.org/2004/07/SLService")]
    public enum TimeKey : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TodayWork = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        TodayRest = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WeekRest = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MonthRest = 4,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SLServiceReference.ISLService")]
    public interface ISLService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISLService/GetEventsForUser", ReplyAction="http://tempuri.org/ISLService/GetEventsForUserResponse")]
        System.IAsyncResult BeginGetEventsForUser(int userID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.Event> EndGetEventsForUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISLService/GetTodayWorkEventsOfUser", ReplyAction="http://tempuri.org/ISLService/GetTodayWorkEventsOfUserResponse")]
        System.IAsyncResult BeginGetTodayWorkEventsOfUser(int userID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> EndGetTodayWorkEventsOfUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISLService/GetFullDayTimes", ReplyAction="http://tempuri.org/ISLService/GetFullDayTimesResponse")]
        System.IAsyncResult BeginGetFullDayTimes(int userID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<DayInfo.SLServiceReference.TimeKey, System.TimeSpan> EndGetFullDayTimes(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISLService/GetMainWorkAndLastEvent", ReplyAction="http://tempuri.org/ISLService/GetMainWorkAndLastEventResponse")]
        System.IAsyncResult BeginGetMainWorkAndLastEvent(int userID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> EndGetMainWorkAndLastEvent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISLService/SetUserWorkEvent", ReplyAction="http://tempuri.org/ISLService/SetUserWorkEventResponse")]
        System.IAsyncResult BeginSetUserWorkEvent(int userID, bool isOpenAction, DayInfo.SLServiceReference.WorkEventType eventType, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> EndSetUserWorkEvent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISLService/GetUserPhotosAbsoluteURI", ReplyAction="http://tempuri.org/ISLService/GetUserPhotosAbsoluteURIResponse")]
        System.IAsyncResult BeginGetUserPhotosAbsoluteURI(int userID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetUserPhotosAbsoluteURI(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISLService/DeleteUserPhoto", ReplyAction="http://tempuri.org/ISLService/DeleteUserPhotoResponse")]
        System.IAsyncResult BeginDeleteUserPhoto(int userID, string photoURI, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteUserPhoto(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISLService/GetNumberOfActiveUsers", ReplyAction="http://tempuri.org/ISLService/GetNumberOfActiveUsersResponse")]
        System.IAsyncResult BeginGetNumberOfActiveUsers(System.AsyncCallback callback, object asyncState);
        
        int EndGetNumberOfActiveUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ISLService/IsLocalHttpRequest", ReplyAction="http://tempuri.org/ISLService/IsLocalHttpRequestResponse")]
        System.IAsyncResult BeginIsLocalHttpRequest(System.AsyncCallback callback, object asyncState);
        
        bool EndIsLocalHttpRequest(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface ISLServiceChannel : DayInfo.SLServiceReference.ISLService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetEventsForUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEventsForUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.Event> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.Event>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetTodayWorkEventsOfUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTodayWorkEventsOfUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetFullDayTimesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFullDayTimesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<DayInfo.SLServiceReference.TimeKey, System.TimeSpan> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<DayInfo.SLServiceReference.TimeKey, System.TimeSpan>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetMainWorkAndLastEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMainWorkAndLastEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SetUserWorkEventCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetUserWorkEventCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetUserPhotosAbsoluteURICompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserPhotosAbsoluteURICompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class DeleteUserPhotoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteUserPhotoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class GetNumberOfActiveUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNumberOfActiveUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class IsLocalHttpRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsLocalHttpRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class SLServiceClient : System.ServiceModel.ClientBase<DayInfo.SLServiceReference.ISLService>, DayInfo.SLServiceReference.ISLService {
        
        private BeginOperationDelegate onBeginGetEventsForUserDelegate;
        
        private EndOperationDelegate onEndGetEventsForUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetEventsForUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTodayWorkEventsOfUserDelegate;
        
        private EndOperationDelegate onEndGetTodayWorkEventsOfUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetTodayWorkEventsOfUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFullDayTimesDelegate;
        
        private EndOperationDelegate onEndGetFullDayTimesDelegate;
        
        private System.Threading.SendOrPostCallback onGetFullDayTimesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMainWorkAndLastEventDelegate;
        
        private EndOperationDelegate onEndGetMainWorkAndLastEventDelegate;
        
        private System.Threading.SendOrPostCallback onGetMainWorkAndLastEventCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetUserWorkEventDelegate;
        
        private EndOperationDelegate onEndSetUserWorkEventDelegate;
        
        private System.Threading.SendOrPostCallback onSetUserWorkEventCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserPhotosAbsoluteURIDelegate;
        
        private EndOperationDelegate onEndGetUserPhotosAbsoluteURIDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserPhotosAbsoluteURICompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserPhotoDelegate;
        
        private EndOperationDelegate onEndDeleteUserPhotoDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserPhotoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNumberOfActiveUsersDelegate;
        
        private EndOperationDelegate onEndGetNumberOfActiveUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetNumberOfActiveUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsLocalHttpRequestDelegate;
        
        private EndOperationDelegate onEndIsLocalHttpRequestDelegate;
        
        private System.Threading.SendOrPostCallback onIsLocalHttpRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public SLServiceClient() {
        }
        
        public SLServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SLServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SLServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SLServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<GetEventsForUserCompletedEventArgs> GetEventsForUserCompleted;
        
        public event System.EventHandler<GetTodayWorkEventsOfUserCompletedEventArgs> GetTodayWorkEventsOfUserCompleted;
        
        public event System.EventHandler<GetFullDayTimesCompletedEventArgs> GetFullDayTimesCompleted;
        
        public event System.EventHandler<GetMainWorkAndLastEventCompletedEventArgs> GetMainWorkAndLastEventCompleted;
        
        public event System.EventHandler<SetUserWorkEventCompletedEventArgs> SetUserWorkEventCompleted;
        
        public event System.EventHandler<GetUserPhotosAbsoluteURICompletedEventArgs> GetUserPhotosAbsoluteURICompleted;
        
        public event System.EventHandler<DeleteUserPhotoCompletedEventArgs> DeleteUserPhotoCompleted;
        
        public event System.EventHandler<GetNumberOfActiveUsersCompletedEventArgs> GetNumberOfActiveUsersCompleted;
        
        public event System.EventHandler<IsLocalHttpRequestCompletedEventArgs> IsLocalHttpRequestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DayInfo.SLServiceReference.ISLService.BeginGetEventsForUser(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEventsForUser(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.Event> DayInfo.SLServiceReference.ISLService.EndGetEventsForUser(System.IAsyncResult result) {
            return base.Channel.EndGetEventsForUser(result);
        }
        
        private System.IAsyncResult OnBeginGetEventsForUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((DayInfo.SLServiceReference.ISLService)(this)).BeginGetEventsForUser(userID, callback, asyncState);
        }
        
        private object[] OnEndGetEventsForUser(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.Event> retVal = ((DayInfo.SLServiceReference.ISLService)(this)).EndGetEventsForUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEventsForUserCompleted(object state) {
            if ((this.GetEventsForUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEventsForUserCompleted(this, new GetEventsForUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEventsForUserAsync(int userID) {
            this.GetEventsForUserAsync(userID, null);
        }
        
        public void GetEventsForUserAsync(int userID, object userState) {
            if ((this.onBeginGetEventsForUserDelegate == null)) {
                this.onBeginGetEventsForUserDelegate = new BeginOperationDelegate(this.OnBeginGetEventsForUser);
            }
            if ((this.onEndGetEventsForUserDelegate == null)) {
                this.onEndGetEventsForUserDelegate = new EndOperationDelegate(this.OnEndGetEventsForUser);
            }
            if ((this.onGetEventsForUserCompletedDelegate == null)) {
                this.onGetEventsForUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEventsForUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetEventsForUserDelegate, new object[] {
                        userID}, this.onEndGetEventsForUserDelegate, this.onGetEventsForUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DayInfo.SLServiceReference.ISLService.BeginGetTodayWorkEventsOfUser(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTodayWorkEventsOfUser(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> DayInfo.SLServiceReference.ISLService.EndGetTodayWorkEventsOfUser(System.IAsyncResult result) {
            return base.Channel.EndGetTodayWorkEventsOfUser(result);
        }
        
        private System.IAsyncResult OnBeginGetTodayWorkEventsOfUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((DayInfo.SLServiceReference.ISLService)(this)).BeginGetTodayWorkEventsOfUser(userID, callback, asyncState);
        }
        
        private object[] OnEndGetTodayWorkEventsOfUser(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> retVal = ((DayInfo.SLServiceReference.ISLService)(this)).EndGetTodayWorkEventsOfUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTodayWorkEventsOfUserCompleted(object state) {
            if ((this.GetTodayWorkEventsOfUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTodayWorkEventsOfUserCompleted(this, new GetTodayWorkEventsOfUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTodayWorkEventsOfUserAsync(int userID) {
            this.GetTodayWorkEventsOfUserAsync(userID, null);
        }
        
        public void GetTodayWorkEventsOfUserAsync(int userID, object userState) {
            if ((this.onBeginGetTodayWorkEventsOfUserDelegate == null)) {
                this.onBeginGetTodayWorkEventsOfUserDelegate = new BeginOperationDelegate(this.OnBeginGetTodayWorkEventsOfUser);
            }
            if ((this.onEndGetTodayWorkEventsOfUserDelegate == null)) {
                this.onEndGetTodayWorkEventsOfUserDelegate = new EndOperationDelegate(this.OnEndGetTodayWorkEventsOfUser);
            }
            if ((this.onGetTodayWorkEventsOfUserCompletedDelegate == null)) {
                this.onGetTodayWorkEventsOfUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTodayWorkEventsOfUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetTodayWorkEventsOfUserDelegate, new object[] {
                        userID}, this.onEndGetTodayWorkEventsOfUserDelegate, this.onGetTodayWorkEventsOfUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DayInfo.SLServiceReference.ISLService.BeginGetFullDayTimes(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFullDayTimes(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.Generic.Dictionary<DayInfo.SLServiceReference.TimeKey, System.TimeSpan> DayInfo.SLServiceReference.ISLService.EndGetFullDayTimes(System.IAsyncResult result) {
            return base.Channel.EndGetFullDayTimes(result);
        }
        
        private System.IAsyncResult OnBeginGetFullDayTimes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((DayInfo.SLServiceReference.ISLService)(this)).BeginGetFullDayTimes(userID, callback, asyncState);
        }
        
        private object[] OnEndGetFullDayTimes(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<DayInfo.SLServiceReference.TimeKey, System.TimeSpan> retVal = ((DayInfo.SLServiceReference.ISLService)(this)).EndGetFullDayTimes(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFullDayTimesCompleted(object state) {
            if ((this.GetFullDayTimesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFullDayTimesCompleted(this, new GetFullDayTimesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFullDayTimesAsync(int userID) {
            this.GetFullDayTimesAsync(userID, null);
        }
        
        public void GetFullDayTimesAsync(int userID, object userState) {
            if ((this.onBeginGetFullDayTimesDelegate == null)) {
                this.onBeginGetFullDayTimesDelegate = new BeginOperationDelegate(this.OnBeginGetFullDayTimes);
            }
            if ((this.onEndGetFullDayTimesDelegate == null)) {
                this.onEndGetFullDayTimesDelegate = new EndOperationDelegate(this.OnEndGetFullDayTimes);
            }
            if ((this.onGetFullDayTimesCompletedDelegate == null)) {
                this.onGetFullDayTimesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFullDayTimesCompleted);
            }
            base.InvokeAsync(this.onBeginGetFullDayTimesDelegate, new object[] {
                        userID}, this.onEndGetFullDayTimesDelegate, this.onGetFullDayTimesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DayInfo.SLServiceReference.ISLService.BeginGetMainWorkAndLastEvent(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMainWorkAndLastEvent(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> DayInfo.SLServiceReference.ISLService.EndGetMainWorkAndLastEvent(System.IAsyncResult result) {
            return base.Channel.EndGetMainWorkAndLastEvent(result);
        }
        
        private System.IAsyncResult OnBeginGetMainWorkAndLastEvent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((DayInfo.SLServiceReference.ISLService)(this)).BeginGetMainWorkAndLastEvent(userID, callback, asyncState);
        }
        
        private object[] OnEndGetMainWorkAndLastEvent(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> retVal = ((DayInfo.SLServiceReference.ISLService)(this)).EndGetMainWorkAndLastEvent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMainWorkAndLastEventCompleted(object state) {
            if ((this.GetMainWorkAndLastEventCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMainWorkAndLastEventCompleted(this, new GetMainWorkAndLastEventCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMainWorkAndLastEventAsync(int userID) {
            this.GetMainWorkAndLastEventAsync(userID, null);
        }
        
        public void GetMainWorkAndLastEventAsync(int userID, object userState) {
            if ((this.onBeginGetMainWorkAndLastEventDelegate == null)) {
                this.onBeginGetMainWorkAndLastEventDelegate = new BeginOperationDelegate(this.OnBeginGetMainWorkAndLastEvent);
            }
            if ((this.onEndGetMainWorkAndLastEventDelegate == null)) {
                this.onEndGetMainWorkAndLastEventDelegate = new EndOperationDelegate(this.OnEndGetMainWorkAndLastEvent);
            }
            if ((this.onGetMainWorkAndLastEventCompletedDelegate == null)) {
                this.onGetMainWorkAndLastEventCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMainWorkAndLastEventCompleted);
            }
            base.InvokeAsync(this.onBeginGetMainWorkAndLastEventDelegate, new object[] {
                        userID}, this.onEndGetMainWorkAndLastEventDelegate, this.onGetMainWorkAndLastEventCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DayInfo.SLServiceReference.ISLService.BeginSetUserWorkEvent(int userID, bool isOpenAction, DayInfo.SLServiceReference.WorkEventType eventType, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetUserWorkEvent(userID, isOpenAction, eventType, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> DayInfo.SLServiceReference.ISLService.EndSetUserWorkEvent(System.IAsyncResult result) {
            return base.Channel.EndSetUserWorkEvent(result);
        }
        
        private System.IAsyncResult OnBeginSetUserWorkEvent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            bool isOpenAction = ((bool)(inValues[1]));
            DayInfo.SLServiceReference.WorkEventType eventType = ((DayInfo.SLServiceReference.WorkEventType)(inValues[2]));
            return ((DayInfo.SLServiceReference.ISLService)(this)).BeginSetUserWorkEvent(userID, isOpenAction, eventType, callback, asyncState);
        }
        
        private object[] OnEndSetUserWorkEvent(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> retVal = ((DayInfo.SLServiceReference.ISLService)(this)).EndSetUserWorkEvent(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetUserWorkEventCompleted(object state) {
            if ((this.SetUserWorkEventCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetUserWorkEventCompleted(this, new SetUserWorkEventCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetUserWorkEventAsync(int userID, bool isOpenAction, DayInfo.SLServiceReference.WorkEventType eventType) {
            this.SetUserWorkEventAsync(userID, isOpenAction, eventType, null);
        }
        
        public void SetUserWorkEventAsync(int userID, bool isOpenAction, DayInfo.SLServiceReference.WorkEventType eventType, object userState) {
            if ((this.onBeginSetUserWorkEventDelegate == null)) {
                this.onBeginSetUserWorkEventDelegate = new BeginOperationDelegate(this.OnBeginSetUserWorkEvent);
            }
            if ((this.onEndSetUserWorkEventDelegate == null)) {
                this.onEndSetUserWorkEventDelegate = new EndOperationDelegate(this.OnEndSetUserWorkEvent);
            }
            if ((this.onSetUserWorkEventCompletedDelegate == null)) {
                this.onSetUserWorkEventCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetUserWorkEventCompleted);
            }
            base.InvokeAsync(this.onBeginSetUserWorkEventDelegate, new object[] {
                        userID,
                        isOpenAction,
                        eventType}, this.onEndSetUserWorkEventDelegate, this.onSetUserWorkEventCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DayInfo.SLServiceReference.ISLService.BeginGetUserPhotosAbsoluteURI(int userID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserPhotosAbsoluteURI(userID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> DayInfo.SLServiceReference.ISLService.EndGetUserPhotosAbsoluteURI(System.IAsyncResult result) {
            return base.Channel.EndGetUserPhotosAbsoluteURI(result);
        }
        
        private System.IAsyncResult OnBeginGetUserPhotosAbsoluteURI(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            return ((DayInfo.SLServiceReference.ISLService)(this)).BeginGetUserPhotosAbsoluteURI(userID, callback, asyncState);
        }
        
        private object[] OnEndGetUserPhotosAbsoluteURI(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((DayInfo.SLServiceReference.ISLService)(this)).EndGetUserPhotosAbsoluteURI(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserPhotosAbsoluteURICompleted(object state) {
            if ((this.GetUserPhotosAbsoluteURICompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserPhotosAbsoluteURICompleted(this, new GetUserPhotosAbsoluteURICompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserPhotosAbsoluteURIAsync(int userID) {
            this.GetUserPhotosAbsoluteURIAsync(userID, null);
        }
        
        public void GetUserPhotosAbsoluteURIAsync(int userID, object userState) {
            if ((this.onBeginGetUserPhotosAbsoluteURIDelegate == null)) {
                this.onBeginGetUserPhotosAbsoluteURIDelegate = new BeginOperationDelegate(this.OnBeginGetUserPhotosAbsoluteURI);
            }
            if ((this.onEndGetUserPhotosAbsoluteURIDelegate == null)) {
                this.onEndGetUserPhotosAbsoluteURIDelegate = new EndOperationDelegate(this.OnEndGetUserPhotosAbsoluteURI);
            }
            if ((this.onGetUserPhotosAbsoluteURICompletedDelegate == null)) {
                this.onGetUserPhotosAbsoluteURICompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserPhotosAbsoluteURICompleted);
            }
            base.InvokeAsync(this.onBeginGetUserPhotosAbsoluteURIDelegate, new object[] {
                        userID}, this.onEndGetUserPhotosAbsoluteURIDelegate, this.onGetUserPhotosAbsoluteURICompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DayInfo.SLServiceReference.ISLService.BeginDeleteUserPhoto(int userID, string photoURI, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUserPhoto(userID, photoURI, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool DayInfo.SLServiceReference.ISLService.EndDeleteUserPhoto(System.IAsyncResult result) {
            return base.Channel.EndDeleteUserPhoto(result);
        }
        
        private System.IAsyncResult OnBeginDeleteUserPhoto(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int userID = ((int)(inValues[0]));
            string photoURI = ((string)(inValues[1]));
            return ((DayInfo.SLServiceReference.ISLService)(this)).BeginDeleteUserPhoto(userID, photoURI, callback, asyncState);
        }
        
        private object[] OnEndDeleteUserPhoto(System.IAsyncResult result) {
            bool retVal = ((DayInfo.SLServiceReference.ISLService)(this)).EndDeleteUserPhoto(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteUserPhotoCompleted(object state) {
            if ((this.DeleteUserPhotoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserPhotoCompleted(this, new DeleteUserPhotoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserPhotoAsync(int userID, string photoURI) {
            this.DeleteUserPhotoAsync(userID, photoURI, null);
        }
        
        public void DeleteUserPhotoAsync(int userID, string photoURI, object userState) {
            if ((this.onBeginDeleteUserPhotoDelegate == null)) {
                this.onBeginDeleteUserPhotoDelegate = new BeginOperationDelegate(this.OnBeginDeleteUserPhoto);
            }
            if ((this.onEndDeleteUserPhotoDelegate == null)) {
                this.onEndDeleteUserPhotoDelegate = new EndOperationDelegate(this.OnEndDeleteUserPhoto);
            }
            if ((this.onDeleteUserPhotoCompletedDelegate == null)) {
                this.onDeleteUserPhotoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserPhotoCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserPhotoDelegate, new object[] {
                        userID,
                        photoURI}, this.onEndDeleteUserPhotoDelegate, this.onDeleteUserPhotoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DayInfo.SLServiceReference.ISLService.BeginGetNumberOfActiveUsers(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNumberOfActiveUsers(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int DayInfo.SLServiceReference.ISLService.EndGetNumberOfActiveUsers(System.IAsyncResult result) {
            return base.Channel.EndGetNumberOfActiveUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetNumberOfActiveUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((DayInfo.SLServiceReference.ISLService)(this)).BeginGetNumberOfActiveUsers(callback, asyncState);
        }
        
        private object[] OnEndGetNumberOfActiveUsers(System.IAsyncResult result) {
            int retVal = ((DayInfo.SLServiceReference.ISLService)(this)).EndGetNumberOfActiveUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNumberOfActiveUsersCompleted(object state) {
            if ((this.GetNumberOfActiveUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNumberOfActiveUsersCompleted(this, new GetNumberOfActiveUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNumberOfActiveUsersAsync() {
            this.GetNumberOfActiveUsersAsync(null);
        }
        
        public void GetNumberOfActiveUsersAsync(object userState) {
            if ((this.onBeginGetNumberOfActiveUsersDelegate == null)) {
                this.onBeginGetNumberOfActiveUsersDelegate = new BeginOperationDelegate(this.OnBeginGetNumberOfActiveUsers);
            }
            if ((this.onEndGetNumberOfActiveUsersDelegate == null)) {
                this.onEndGetNumberOfActiveUsersDelegate = new EndOperationDelegate(this.OnEndGetNumberOfActiveUsers);
            }
            if ((this.onGetNumberOfActiveUsersCompletedDelegate == null)) {
                this.onGetNumberOfActiveUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNumberOfActiveUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetNumberOfActiveUsersDelegate, null, this.onEndGetNumberOfActiveUsersDelegate, this.onGetNumberOfActiveUsersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult DayInfo.SLServiceReference.ISLService.BeginIsLocalHttpRequest(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsLocalHttpRequest(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool DayInfo.SLServiceReference.ISLService.EndIsLocalHttpRequest(System.IAsyncResult result) {
            return base.Channel.EndIsLocalHttpRequest(result);
        }
        
        private System.IAsyncResult OnBeginIsLocalHttpRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((DayInfo.SLServiceReference.ISLService)(this)).BeginIsLocalHttpRequest(callback, asyncState);
        }
        
        private object[] OnEndIsLocalHttpRequest(System.IAsyncResult result) {
            bool retVal = ((DayInfo.SLServiceReference.ISLService)(this)).EndIsLocalHttpRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsLocalHttpRequestCompleted(object state) {
            if ((this.IsLocalHttpRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsLocalHttpRequestCompleted(this, new IsLocalHttpRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsLocalHttpRequestAsync() {
            this.IsLocalHttpRequestAsync(null);
        }
        
        public void IsLocalHttpRequestAsync(object userState) {
            if ((this.onBeginIsLocalHttpRequestDelegate == null)) {
                this.onBeginIsLocalHttpRequestDelegate = new BeginOperationDelegate(this.OnBeginIsLocalHttpRequest);
            }
            if ((this.onEndIsLocalHttpRequestDelegate == null)) {
                this.onEndIsLocalHttpRequestDelegate = new EndOperationDelegate(this.OnEndIsLocalHttpRequest);
            }
            if ((this.onIsLocalHttpRequestCompletedDelegate == null)) {
                this.onIsLocalHttpRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsLocalHttpRequestCompleted);
            }
            base.InvokeAsync(this.onBeginIsLocalHttpRequestDelegate, null, this.onEndIsLocalHttpRequestDelegate, this.onIsLocalHttpRequestCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override DayInfo.SLServiceReference.ISLService CreateChannel() {
            return new SLServiceClientChannel(this);
        }
        
        private class SLServiceClientChannel : ChannelBase<DayInfo.SLServiceReference.ISLService>, DayInfo.SLServiceReference.ISLService {
            
            public SLServiceClientChannel(System.ServiceModel.ClientBase<DayInfo.SLServiceReference.ISLService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetEventsForUser(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetEventsForUser", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.Event> EndGetEventsForUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.Event> _result = ((System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.Event>)(base.EndInvoke("GetEventsForUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTodayWorkEventsOfUser(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetTodayWorkEventsOfUser", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> EndGetTodayWorkEventsOfUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> _result = ((System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent>)(base.EndInvoke("GetTodayWorkEventsOfUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFullDayTimes(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetFullDayTimes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.Generic.Dictionary<DayInfo.SLServiceReference.TimeKey, System.TimeSpan> EndGetFullDayTimes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.Generic.Dictionary<DayInfo.SLServiceReference.TimeKey, System.TimeSpan> _result = ((System.Collections.Generic.Dictionary<DayInfo.SLServiceReference.TimeKey, System.TimeSpan>)(base.EndInvoke("GetFullDayTimes", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetMainWorkAndLastEvent(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetMainWorkAndLastEvent", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> EndGetMainWorkAndLastEvent(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> _result = ((System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent>)(base.EndInvoke("GetMainWorkAndLastEvent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSetUserWorkEvent(int userID, bool isOpenAction, DayInfo.SLServiceReference.WorkEventType eventType, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userID;
                _args[1] = isOpenAction;
                _args[2] = eventType;
                System.IAsyncResult _result = base.BeginInvoke("SetUserWorkEvent", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> EndSetUserWorkEvent(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent> _result = ((System.Collections.ObjectModel.ObservableCollection<DayInfo.SLServiceReference.WorkEvent>)(base.EndInvoke("SetUserWorkEvent", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserPhotosAbsoluteURI(int userID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userID;
                System.IAsyncResult _result = base.BeginInvoke("GetUserPhotosAbsoluteURI", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetUserPhotosAbsoluteURI(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetUserPhotosAbsoluteURI", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteUserPhoto(int userID, string photoURI, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = userID;
                _args[1] = photoURI;
                System.IAsyncResult _result = base.BeginInvoke("DeleteUserPhoto", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndDeleteUserPhoto(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("DeleteUserPhoto", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetNumberOfActiveUsers(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetNumberOfActiveUsers", _args, callback, asyncState);
                return _result;
            }
            
            public int EndGetNumberOfActiveUsers(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("GetNumberOfActiveUsers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsLocalHttpRequest(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("IsLocalHttpRequest", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndIsLocalHttpRequest(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("IsLocalHttpRequest", _args, result)));
                return _result;
            }
        }
    }
}
