<?xml version="1.0" encoding="utf-8"?>
<Project
    xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
    ToolsVersion="12.0" DefaultTargets="Run">

  <PropertyGroup>
    <MainProjectDirectory>$(MSBuildProjectDirectory)\..\Portal\</MainProjectDirectory>
    <PortalSolution>$(MainProjectDirectory)Portal.sln</PortalSolution>
    <PortalOutputDirectory>$(MainProjectDirectory)\..\Portal_Deploy\</PortalOutputDirectory>
    <WebConfig>$(MainProjectDirectory)\Portal\web.config</WebConfig>
  </PropertyGroup>
  
  <PropertyGroup>
    <MigratorSolution>$(MSBuildProjectDirectory)\..\Migrator\Migration.sln</MigratorSolution>
    <MigratorOutputDirectory>$(MSBuildProjectDirectory)\..\Migration\</MigratorOutputDirectory>
    <DataBaseMigrationDll>$(MigratorOutputDirectory)Migration.dll</DataBaseMigrationDll>  
    <BackupFileDirectory>$(ALLUSERSPROFILE)\CodeProject\Migration\</BackupFileDirectory>
    <BackupOutputDirectory>$(MSBuildProjectDirectory)\..\backup\</BackupOutputDirectory>
  </PropertyGroup>

  <PropertyGroup>
    <SqlScripts>$(MSBuildProjectDirectory)\..\DataBaseScripts\</SqlScripts>
    <CreateDataBaseSQL>$(SqlScripts)dbCreateEmpty.sql</CreateDataBaseSQL>
    <AddTablesSQL>$(SqlScripts)dbAddTables.sql</AddTablesSQL>
  </PropertyGroup>

  <PropertyGroup>
    <MigratorTasksDirectory>$(MSBuildProjectDirectory)\..\tools\FluentMigrator\</MigratorTasksDirectory>
    <MSBuildCommunityTasksPath>$(MSBuildProjectDirectory)\..\tools\MSBuild Community Tasks\Build\</MSBuildCommunityTasksPath>
    <MSBuildCommunityTasksLib>$(MSBuildCommunityTasksPath)MSBuild.Community.Tasks.dll</MSBuildCommunityTasksLib>
    <MSBuildExtensionTasksPath>$(MSBuildProjectDirectory)\..\tools\MSBuild ExtensionPack Tasks\Build\</MSBuildExtensionTasksPath>
    <MSBuildExtensionTasksTarget>$(MSBuildExtensionTasksPath)MSBuild.ExtensionPack.tasks</MSBuildExtensionTasksTarget>
  </PropertyGroup>

  <Import Project="$(MSBuildExtensionTasksTarget)"/>
  <Import Project="$(MSBuildCommunityTasksPath)MSBuild.Community.Tasks.Targets"/>
  <UsingTask
      TaskName="FluentMigrator.MSBuild.Migrate"
      AssemblyFile="$(MigratorTasksDirectory)FluentMigrator.MSBuild.dll" />
  
  <Target Name="BuildPortal" AfterTargets="Run">
    <Message Text="Start Portal building" />
    <MakeDir Directories="$(PortalOutputDirectory)" />
    <MSBuild Projects="$(PortalSolution)" Properties="OutputPath=$(PortalOutputDirectory)"/>
    <Message Text="Finish Portal building" />
  </Target>

  <Target Name="BuildMigrator" AfterTargets="BuildPortal">
    <Message Text="Start migration building" />
    <MakeDir Directories="$(MigratorOutputDirectory)" />
	<MSBuild.ExtensionPack.FileSystem.Folder TaskAction="RemoveContent" Path="$(MigratorOutputDirectory)"/>
    <MSBuild Projects="$(MigratorSolution)" Properties="OutputPath=$(MigratorOutputDirectory)"/>
    <Message Text="Finish migration building" />
  </Target>

  <Target Name="CreateDataBase" DependsOnTargets="CheckDataBaseExists" AfterTargets="BuildMigrator">
    <Message Text="Creating DataBase"/>
    <MSBuild.ExtensionPack.SqlServer.SqlCmd Condition="'$(DataBaseExist)'=='False'" TaskAction="Execute" Server="$(Instance)" InputFiles="$(CreateDataBaseSQL)" />
    <MSBuild.ExtensionPack.SqlServer.SqlCmd Condition="'$(DataBaseExist)'=='False'" TaskAction="Execute" Server="$(Instance)" InputFiles="$(AddTablesSQL)" />
  </Target>

  <Target Name="CheckDataBaseExists" DependsOnTargets="Common">
    <MSBuild.ExtensionPack.Sql2012.Database TaskAction="CheckExists" DatabaseItem="$(DatabaseName)" MachineName="$(Instance)" >
      <Output TaskParameter="Exists" PropertyName="DataBaseExist"/>
    </MSBuild.ExtensionPack.Sql2012.Database>
    <Message Text="Database Exists: $(DataBaseExist)"/>
  </Target>

  <Target Name="Common">
    <XmlPeek Namespaces="&lt;Namespace Prefix='msb' Uri='http://schemas.microsoft.com/developer/msbuild/2003'/&gt;"
            XmlInputPath="$(WebConfig)"
             Query="/configuration/connectionStrings/add[@name='DBConnStr']/@connectionString"
            Condition="'$(ConnectionString)' == ''">
      <Output TaskParameter="Result"  PropertyName="ConnectionString" />
    </XmlPeek>

    <CreateProperty Value="$([System.Text.RegularExpressions.Regex]::Match($(ConnectionString), `Initial Catalog=([^;])*`))">
      <Output TaskParameter="Value" PropertyName="DatabaseName" />
    </CreateProperty>

    <CreateProperty Value="$(DatabaseName.Replace('Initial Catalog=', ''))">
      <Output TaskParameter="Value" PropertyName="DatabaseName" />
    </CreateProperty>

    <CreateProperty Value="$([System.Text.RegularExpressions.Regex]::Match($(ConnectionString), `Data Source=([^;])*`))">
      <Output TaskParameter="Value" PropertyName="Instance" />
    </CreateProperty>

    <CreateProperty Value="$(Instance.Replace('Data Source=', ''))">
      <Output TaskParameter="Value" PropertyName="Instance" />
    </CreateProperty>

    <CreateProperty Value="$([System.Text.RegularExpressions.Regex]::Replace($(ConnectionString), `Initial Catalog=([^;])*`, `Initial Catalog=master`))">
      <Output TaskParameter="Value" PropertyName="MasterConnectionString" />
    </CreateProperty>

    <MSBuild.Community.Tasks.Time Format="yyyy-MM-dd-HH-mm-ss">
      <Output TaskParameter="FormattedTime" PropertyName="BuildDate" />
    </MSBuild.Community.Tasks.Time>

    <CreateProperty Value="$(BackupFileDirectory)$(DatabaseName)-$(BuildDate).bak">
      <Output TaskParameter="Value" PropertyName="BackupFilePath" />
    </CreateProperty>

    <CreateProperty Value="$(BackupOutputDirectory)$(DatabaseName)-$(BuildDate).zip">
      <Output TaskParameter="Value" PropertyName="BackupOutputPath" />
    </CreateProperty>

    <MakeDir Directories="$(BackupFileDirectory)" />
    <MakeDir Directories="$(BackupOutputDirectory)" />
  </Target>

  <Target Name="Migrate" DependsOnTargets="Backup; BuildMigrator" AfterTargets="CreateDataBase">
    <Message Text="Starting FluentMigrator migration" />
    <Migrate Database="sqlserver"
             Connection="$(ConnectionString)"
             Target="$(DataBaseMigrationDll)" />
  
  </Target>

  <Target Name="Backup" DependsOnTargets="Common">
    <Message Text="Backing up the database to temp folder" />
    <MSBuild.Community.Tasks.SqlExecute
      ConnectionString="$(MasterConnectionString)"
      Command="BACKUP DATABASE [$(DatabaseName)] TO DISK = N'$(BackupFilePath)' WITH NOFORMAT, INIT, NAME = N'$(DatabaseName) - Full Backup - $(BuildDate)', SKIP, NOREWIND, NOUNLOAD, STATS = 10" />
    <Message Text="Database backup created" />

    <Message Text="Zipping the backup file to /backup folder" />
    <MSBuild.Community.Tasks.Zip
        Files="$(BackupFilePath)"
        WorkingDirectory="$(BackupFileDirectory)"
        ZipFileName="$(BackupOutputPath)"
        ZipLevel="9" />

    <Delete Files="$(BackupFilePath)" />
    <Message Text="Database backup zipped to /backup folder as $(DatabaseName)-$(BuildDate).zip" />
  </Target>

  <Target Name="MigrateRollbackAll" DependsOnTargets="Backup; BuildMigrator">
    <Message Text="Starting FluentMigrator Rollback All"/>
    <Migrate Database="sqlserver"
             Connection="$(ConnectionString)"
             Target="$(DataBaseMigrationDll)"
	     Task="rollback:all">
    </Migrate>
  </Target>

  <Target Name="Restore" DependsOnTargets="Common">
    <Message Text="Restoring the database from /backup folder" />
    <Message Text="Unzipping the backup file $(RestoreFileName).zip" />
    <MSBuild.Community.Tasks.Unzip
        ZipFileName="$(BackupOutputDirectory)$(RestoreFileName).zip"
        TargetDirectory="$(BackupFileDirectory)"
        />

    <CreateProperty Value="$(BackupFileDirectory)$(RestoreFileName).bak">
      <Output TaskParameter="Value" PropertyName="BackupFilePath" />
    </CreateProperty>

    <MSBuild.Community.Tasks.SqlExecute
        ConnectionString='$(MasterConnectionString)'
        Command="DECLARE @SQL varchar(max); SET @SQL = ''; SELECT @SQL = @SQL + 'Kill ' + Convert(varchar, SPId) + ';' FROM MASTER..SysProcesses WHERE DBId = DB_ID('$(DatabaseName)') AND SPId &lt;&gt; @@SPId; EXEC(@SQL); RESTORE DATABASE [$(DatabaseName)] FROM  DISK = N'$(BackupFilePath)' WITH FILE = 1, NOUNLOAD, REPLACE, STATS = 10;"
        />

    <Delete Files="$(BackupFilePath)" />
    <Message Text="Database restored successfully from $(RestoreFileName).zip" />
  </Target>

  <Target Name="Run">
    <Message Text="Running targets"/>
  </Target>

  <Target Name="Finish" AfterTargets="Migrate">
  
    <Message Text="All targets finished"/>
  </Target>
</Project>